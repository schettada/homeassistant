{
    "config": {
        "step": {
            "user": {
                "title": "LLM Vision Setup",
                "description": "Select a provider to set up"
            },
            "localai": {
                "title": "Connect to your LocalAI server",
                "description": "Provide the IP address and port of your LocalAI server.",
                "data": {
                    "localai_ip": "IP address",
                    "localai_port": "Port",
                    "localai_https": "HTTPS"
                }
            },
            "ollama": {
                "title": "Configure Ollama",
                "description": "Provide the IP address and port of your Ollama server.",
                "data": {
                    "ollama_ip": "IP address",
                    "ollama_port": "Port",
                    "ollama_https": "HTTPS"
                }
            },
            "openai": {
                "title": "Configure OpenAI",
                "description": "Provide a valid OpenAI API key.",
                "data": {
                    "openai_api_key": "API key"
                }
            },
            "azure": {
                "title": "Configure Azure",
                "description": "Provide a valid Azure API key, base URL, deployment and API version.\nThe Base URL must be in the format `https://domain.openai.azure.com/` including the trailing slash.",
                "data": {
                    "azure_api_key": "API key",
                    "azure_base_url": "Base URL",
                    "azure_deployment": "Deployment",
                    "azure_version": "API Version"
                }
            },
            "anthropic": {
                "title": "Configure Anthropic Claude",
                "description": "Provide a valid Anthropic API key.",
                "data": {
                    "anthropic_api_key": "API key"
                }
            },
            "google": {
                "title": "Configure Google Gemini",
                "description": "Provide a valid Google Gemini API key.",
                "data": {
                    "google_api_key": "API key"
                }
            },
            "groq": {
                "title": "Configure Groq",
                "description": "Provide a valid Groq API key.",
                "data": {
                    "groq_api_key": "API key"
                }
            },
            "custom_openai": {
                "title": "Configure Custom OpenAI provider",
                "description": "**Important**: Only works if the API is compatible with OpenAI's API. If the API doesn't require an API key, enter a dummy value. The endpoint must have the following format: `http(s)://baseURL(:port)/some/endpoint`",
                "data": {
                    "custom_openai_endpoint": "Custom Endpoint",
                    "custom_openai_api_key": "API key",
                    "custom_openai_default_model": "Default model to use, e.g. gpt-4o-mini"
                }
            },
            "semantic_index": {
                "title": "Remember Events",
                "description": "Set how many days events will be remembered for. Events will automatically be deleted after this time. Events are stored locally and can be deleted manually in the calendar view. (0 disables auto delete)",
                "data": {
                    "retention_time": "Auto delete events after (days)"
                }
            },
            "aws_bedrock": {
                "title": "Configure AWS Bedrock provider",
                "description": "**Important**: This currently only supports the following models: Nova, Anthropic Claude",
                "data": {
                    "aws_access_key_id": "Access Key",
                    "aws_secret_access_key": "Secret",
                    "aws_region_name": "The region string",
                    "aws_default_model": "The default model to use"
                }
            },
            "openwebui": {
                "title": "Configure Open WebUI provider",
                "description": "Provide API key (JWT token), IP Address, Port, HTTP(S) and default model.",
                "data": {
                    "openwebui_api_key": "API Key (JWT token)",
                    "openwebui_ip": "IP Address",
                    "openwebui_port": "Port",
                    "openwebui_https": "Use HTTPS",
                    "openwebui_default_model": "Default model"
                }
            }
        },
        "error": {
            "handshake_failed": "Could not connect to the server. Check you API key or IP and port",
            "empty_api_key": "Invalid API key",
            "invalid_provider": "Invalid provider selected"
        },
        "abort": {
            "unknown_provider": "Unknown provider"
        }
    }
}